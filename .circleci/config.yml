version: 2
jobs:
  test:
    docker:
      - image: circleci/python:3.6
      - image: circleci/postgres
        environment:
          POSTGRES_USER: supportService
          POSTGRES_DB: supportService
          POSTGRES_PASSWORD: supportService

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "setup.py" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r dev-requirements.txt
            pip install -e .
            pip install -e lib/api-client-python

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "setup.py" }}

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make test

      - run:
          name: generate coverage report
          when: always
          command: |
            . venv/bin/activate
            coverage html
            codecov

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: htmlcov

      - store_artifacts:
          path: test-reports

  build_docker:
    machine: true
    steps:
      - checkout
      - run:
          name: Install Docker Compose
          command: sudo pip install docker-compose
      - run:
          name: Generate Hosts File
          command: |
            virtualenv -p python3 venv
            . venv/bin/activate
            pip install -r dev-requirements.txt
            pip install -e .
            pip install -e lib/api-client-python
            python cli.py generate-hosts
      - run:
          name: Build Image
          command: |
            docker build -t levlaz/supportservice:$CIRCLE_SHA1 -f Dockerfile.prod .
            docker tag levlaz/supportservice:$CIRCLE_SHA1 levlaz/supportservice:latest
            
            cd webdriver && docker build -t levlaz/ld-ss-simulator:$CIRCLE_SHA1 .
            cd webdriver && docker tag levlaz/ss-ld-simulator:$CIRCLE_SHA1 levlaz/ld-ss-simulator:latest
      # - run:
      #     name: Test Stack
      #     command: |
      #       export DATABASE_URL=postgresql://supportService:supportService@db/supportService
      #       docker-compose -f docker-compose.prod.yml up -d
      - run:
          name: Push Image
          command: |
            docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            docker push levlaz/supportservice
            docker push levlaz/ld-ss-simulator

  deploy:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "setup.py" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r dev-requirements.txt
            pip install -e .
            pip install -e lib/api-client-python
            sudo apt-get install -y rsync
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "setup.py" }}
      - run:
          name: Deploy to Production
          command: |
            . venv/bin/activate
            make deploy
            make deploy-relay

  simulate:
    docker:
      - image: circleci/openjdk:8-node-browsers
      - run:
          name: install dependencies and create hosts file
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r dev-requirements.txt
            pip install -e .
            pip install -e lib/api-client-python
            python cli.py generate-hosts
      - run: 
          name: Install Simualtor 
          command: |
            cd webdriver
            mvn compile assembly:single 
      - run:
          name: Run Simulation
          command: |
            java -jar target/webdriver-1.0-SNAPSHOT-jar-with-dependencies.jar

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - simulate
          filters:
            branches:
              only: selenim
      - test
      - build_docker:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - build_docker
          filters:
            branches:
              only: master