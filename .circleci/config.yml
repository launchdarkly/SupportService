version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.14.0
  aws-cli: circleci/aws-cli@1.3.1
jobs:
  test:
    docker:
      - image: circleci/python:3.6
      - image: circleci/postgres
        environment:
          POSTGRES_USER: supportService
          POSTGRES_DB: supportService
          POSTGRES_PASSWORD: supportService
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-dependencies-{{ checksum "setup.py" }}
            - v4-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r dev-requirements.txt
            pip install -e .
      - save_cache:
          paths:
            - ./venv
          key: v4-dependencies-{{ checksum "setup.py" }}-v2
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make test
      - run:
          name: generate coverage report
          when: always
          command: |
            . venv/bin/activate
            coverage html
            codecov
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: htmlcov
      - store_artifacts:
          path: test-reports
  build_docker:
    machine: true
    steps:
      - checkout
      - restore_cache:
          keys:
            - v9-machine-dependencies-{{ checksum "setup.py" }}
            - v9-machine-dependencies-
      - run:
          name: Install Docker Compose
          command: sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      - run:
          name: Build Image
          command: |
            docker build -t levlaz/supportservice:$CIRCLE_SHA1 -f Dockerfile .
            docker tag levlaz/supportservice:$CIRCLE_SHA1 levlaz/supportservice:latest
      - run:
          name: Test Stack
          command: |
            export DATABASE_URL=postgresql://supportService:supportService@db/supportService
            docker-compose -f tests/docker-compose.test.yml up -d
            docker-compose -f tests/docker-compose.test.yml down
      - run:
          name: Test Production Stack
          command: |
            python -m pip install -r dev-requirements.txt
            make generate
            docker-compose -f docker-compose.prod.yml up -d
      - run:
          name: Debug Docker
          command: docker ps -a
      - run:
          name: Push Image
          command: |
            docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            docker push levlaz/supportservice
  deploy_staging:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-dependencies-{{ checksum "setup.py" }}
            - v4-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r dev-requirements.txt
            pip install -e .
            sudo apt-get install -y rsync
      - save_cache:
          paths:
            - ./venv
          key: v4-dependencies-{{ checksum "setup.py" }}
      - run:
          name: Deploy to Staging
          command: |
            . venv/bin/activate
            make generate
            ./scripts/deploy.sh ${STAGING_SERVER}
  deploy:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-dependencies-{{ checksum "setup.py" }}
            - v4-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r dev-requirements.txt
            pip install -e .
            sudo apt-get install -y rsync
      - save_cache:
          paths:
            - ./venv
          key: v4-dependencies-{{ checksum "setup.py" }}
      - run:
          name: Deploy to Production
          command: |
            . venv/bin/activate
            make generate
            ./scripts/deploy.sh ${PRODUCTION_SERVER}
  aws-cli-deploy-staging:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: circle-ci
      - run: aws deploy create-deployment --application-name AppECS-flask-app-cluster-ss-staging --deployment-group-name DgpECS-flask-app-cluster-ss-staging --revision revisionType=S3,s3Location="{bucket=support-service-codedeploy,key=appspec_staging.yaml,bundleType=yaml}"
  aws-cli-deploy-production:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: circle-ci
      - run: aws deploy create-deployment --application-name AppECS-flask-app-cluster-ss-production --deployment-group-name DgpECS-flask-app-cluster-ss-production --revision revisionType=S3,s3Location="{bucket=support-service-codedeploy,key=appspec.yaml,bundleType=yaml}"
  simulate:
    docker:
      - image: circleci/openjdk:11-node-browsers
    steps:
      - checkout
      - run:
          name: Install Simualtor
          command: |
            cd tests/webdriver
            mvn compile assembly:single
      - run:
          name: Run Simulation
          command: |
            cd tests/webdriver
            java -jar target/webdriver-1.0-SNAPSHOT-jar-with-dependencies.jar
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - test
      - build_docker:
          requires:
            - test
      - deploy_staging:
          requires:
            - build_docker
          filters:
            branches:
              ignore: master
      - hold:
          name: hold-linode-deploy
          type: approval
          requires:
            - build_docker
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - hold-linode-deploy
          filters:
            branches:
              only: master
      - aws-ecr/build-and-push-image:
          name: aws-ecr-build-and-push-staging
          repo: "${AWS_ECR_REPO}"
          dockerfile: Dockerfile.ecr
          tag: staging
      - aws-cli-deploy-staging:
          requires:
            - aws-ecr-build-and-push-staging
      - hold:
          name: hold-aws-deploy
          type: approval
          requires:
            - aws-cli-deploy-staging
          filters:
            branches:
              only: master
      - aws-ecr/build-and-push-image:
          name: aws-ecr-build-and-push-production
          requires:
            - hold-aws-deploy
          repo: "${AWS_ECR_REPO}"
          dockerfile: Dockerfile.ecr
          tag: production
          filters:
            branches:
              only: master
      - aws-cli-deploy-production:
          requires:
            - aws-ecr-build-and-push-production
          filters:
            branches:
              only: master
